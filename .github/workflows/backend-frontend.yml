name: Backend - Frontend CI/CD

on:
  workflow_call:
    inputs:
      externall_call:
        description: 'To distinguish workflow_call from regular events'
        type: boolean
        required: false
        default: true
      version:
        description: 'Version of the release'
        type: string
        required: true
      create-executables:
        description: 'Create executables'
        type: boolean
        required: true
    secrets:
      SCW_ACCESS_KEY_ID:
        required: false
        description: 'AWS Access Key ID'
      SCW_SECRET_KEY:
        required: false
        description: 'AWS Secret Access Key'
      MAPBOX_PUBLIC_ACCESS_TOKEN:
        required: true
        description: 'Mapbox public token'
      GH_IMAGE_PULL_TOKEN:
        required: true
        description: 'GitHub Image Pull Token'
      MINIO_USERNAME:
        required: true
        description: 'MinIO Username'
      MINIO_PASSWORD:
        required: true
        description: 'MinIO Password'
      DATABASE_USERNAME:
        required: true
        description: 'Database Username'
      DATABASE_PASSWORD:
        required: true
        description: 'Database Password'
      BACKEND_SECUTIRY_SECRET:
        required: true
        description: 'Backend Security Secret'
      KUBE_CONFIG:
        required: true
        description: 'Kubernetes Config'

  pull_request:
    branches:
      - main
    paths:
      - 'packages/backend/**'
      - '.github/workflows/backend-frontend.yml'

env:
  CI: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-backend
  JAVA_VERSION: 21

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: packages/backend

    permissions:
      contents: read
      packages: write

    services:
      docker:
        image: docker:dind
        options: --privileged

    outputs:
      image: ${{ steps.extract-tag.outputs.second-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GraalVM (Java ${{ env.JAVA_VERSION }})
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ env.JAVA_VERSION }}'
          cache: 'gradle'

      - name: Read rights to gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test -Pis_on_premise=true

      - name: Run native compile
        if: ${{ inputs.externall_call }}
        run: ./gradlew nativeCompile -Pimage_name=hollybike_server

      - name: Log in to the Container registry
        if: ${{ inputs.externall_call }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: ${{ inputs.externall_call }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            ${{ inputs.version }}

      - name: Build and push
        if: ${{ inputs.externall_call }}
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: packages/backend
          build-args: |
            EXECUTABLE=hollybike_server  

  build-frontend:
    name: Build Frontend
    if: ${{ inputs.externall_call }}
    uses: ./.github/workflows/build-frontend.yml
    with:
      version: ${{ github.event.inputs.version }}
    secrets:
      MAPBOX_PUBLIC_ACCESS_TOKEN: ${{ secrets.MAPBOX_PUBLIC_ACCESS_TOKEN }}

  deploy-k8s-infrastructure:
    name: Infrastructure & Deployment
    needs: [ build-frontend, build-backend ]
    if: ${{ inputs.externall_call }}
    uses: ./.github/workflows/infrastructure.yml
    secrets:
      SCW_ACCESS_KEY_ID: ${{ secrets.SCW_ACCESS_KEY_ID }}
      SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
      GH_IMAGE_PULL_TOKEN: ${{ secrets.GH_IMAGE_PULL_TOKEN }}
      MAPBOX_PUBLIC_ACCESS_TOKEN: ${{ secrets.MAPBOX_PUBLIC_ACCESS_TOKEN }}
      MINIO_USERNAME: ${{ secrets.MINIO_USERNAME }}
      MINIO_PASSWORD: ${{ secrets.MINIO_PASSWORD }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      BACKEND_SECUTIRY_SECRET: ${{ secrets.BACKEND_SECUTIRY_SECRET }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

  build-backend-on-premises:
    name: Build On Premises
    if: inputs.externall_call && inputs.create-executables
    needs: [ build-frontend ]
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        java-version: [ '21' ]
        include:
          - os: ubuntu-latest
            executable-suffix: ''
          - os: windows-latest
            executable-suffix: '.exe'

    runs-on: ${{ matrix.os }}

    permissions:
      contents: read

    defaults:
      run:
        working-directory: packages/backend
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GraalVM (Java ${{ matrix.java-version }})
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ matrix.java-version }}'
          version: '23.1.2'
          distribution: 'graalvm-community'
          components: 'native-image'
          cache: 'gradle'

      - name: Read rights to gradlew
        run: chmod +x gradlew

      - id: executable
        run: echo "executable_name=hollybike-${{ runner.os }}-${{ inputs.version }}-x86_64" >> $GITHUB_OUTPUT

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: HollyBike-Frontend-${{ inputs.version }}
          path: packages/backend/src/main/resources/front

      - name: Run native compile
        run: ./gradlew nativeCompile -Pimage_name=${{ steps.executable.outputs.executable_name }} -Pis_on_premise=true

      #      - name: Create native fake folder
      #        run: mkdir -p build/native/nativeCompile
      #
      #      - name: Create fake executable
      #        run: touch build/native/nativeCompile/${{ steps.executable.outputs.executable_name }}${{ matrix.executable-suffix }}

      - name: Upload executable to the artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HollyBike-${{ inputs.version }}-Backend-${{ runner.os }}-${{ inputs.version }}
          path: packages/backend/build/native/nativeCompile/${{ steps.executable.outputs.executable_name }}${{ matrix.executable-suffix }}
          retention-days: 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

